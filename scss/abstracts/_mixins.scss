@use 'sass:map';
@use '../abstracts/breakpoints' as *;

// Mixin for using your breakpoints
@mixin mq($key) {
  $size: map-get($breakpoints, $key);

  @media only screen and (min-width: $size) {
    @content;
  }
}

// Mixins for creating device-based styles
@mixin tablet {
  @media only screen and (min-width: $tablet * 1px) {
    @content;
  }
}

@mixin large {
  @media only screen and (min-width: $large * 1px) {
    @content;
  }
}

@mixin desktop {
  @media only screen and (min-width: $desktop * 1px) {
    @content;
  }
}

// Mixin for shorter box-sizing
@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}

// Mixin for pseudo elements
@mixin pseudo(
  $width: 100%,
  $height: 100%,
  $display: inline-block,
  $pos: absolute,
  $content: ""
) {
  content: $content;
  display: $display;
  position: $pos;
  @include box($width, $height);
}

// Mixins for different flex use cases
@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-center-column {
  @include flex-center;
  flex-direction: column;
}

@mixin flex-center-vert {
  display: flex;
  align-items: center;
}

@mixin flex-center-horiz {
  display: flex;
  justify-content: center;
}

// Mixin for creating reusable a box-radius
@mixin radius($radius) {
  border-radius: $radius * 1px;
}

// Mixin for paddings
@mixin padding($top, $right, $bottom, $left) {
  padding-top: $top * 1px;
  padding-right: $right * 1px;
  padding-bottom: $bottom * 1px;
  padding-left: $left * 1px;
}

// Mixin for margins
@mixin margin($top, $right, $bottom, $left) {
  margin-top: $top * 1px;
  margin-right: $right * 1px;
  margin-bottom: $bottom * 1px;
  margin-left: $left * 1px;
}

// Mixin for creating a gradient-background
@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(
      center,
      ellipse cover,
      $start-color,
      $end-color
    );
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}
